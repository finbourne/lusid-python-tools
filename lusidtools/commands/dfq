#!/usr/bin/python3

import argparse
import pandas as pd


def parse():
    parser = argparse.ArgumentParser(description='DataFrame Query Tool')
    parser.add_argument('input', nargs='+',
                        help='source csv file')
    parser.add_argument('-c','--columns', action='store_true',
                        help='display columns')
    parser.add_argument('-s','--select', nargs='*', metavar='column',
                        help='fields to select')
    parser.add_argument('-w','--where', nargs='*', metavar='column=value',
                        help='filtering')
    parser.add_argument('-u','--unique', action='store_true', help='unique values only')
    parser.add_argument('-g','--groupby', nargs='*', metavar='column',
                        help='fields to groupby')
    parser.add_argument('--filename', metavar = 'filename', 
                        help='save output to file')
    parser.add_argument('-f','--first', type=int, default=0,
                        help='show first "n" records')
    parser.add_argument('--strings', action='store_true',
                        help='interpret all fields as strings')
    parser.add_argument('-l','--last', type=int, default=0,
                        help='show last "n" records')
    parser.add_argument('-j','--join', nargs='+',
                        help='join to other frame. path, criterion')
    parser.add_argument('--dp',type=int,default=2)
    parser.add_argument('-t','--transpose',action='store_true')
    parser.add_argument('-m', action='store_true')
    parser.add_argument('-i','--index', action='store_true')
    parser.add_argument('-x','--xls', action='store_true')
    parser.add_argument('--glob', action='store_true')
    parser.add_argument('--identify', action ='store_true')
    parser.add_argument('--separator', help='separator from text files')

    return parser.parse_args()

args = parse()

# Display a dataframe with no cropping
def display_df(df,decimals=2):
    if args.xls:
       import xlwings as xw
       wb = xw.Book()
       wb.sheets[0].range("A1").options(index=args.index).value = df
    else:
        fmt="{:,." + str(decimals) + "f}"
        pd.options.display.float_format = fmt.format

        try:
            if args.transpose:
                df = df.T
                args.index=True
            with pd.option_context(
                'display.width',None,
                'display.max_rows',1000):
                print(df.fillna('').to_string(index=args.index))
        except:
            print(df.to_string(index=args.index))

nrows = args.first if args.first > 0 and args.last == 0 and args.groupby is None and args.where is None and len(args.input) == 1 else None

if args.glob:
   import glob
   args.input = glob.glob(args.input[0])

if args.columns:
   args.input = args.input[0:1]
   nrows = 2

reader_args = {'nrows':nrows}
if args.strings:
   reader_args['dtype'] = str
   
if args.separator:
   reader_args['sep'] = args.separator

def load_frame(path):
    if path.endswith('.pk'):
       return pd.read_pickle(path)
    elif '.xls' in path.lower():
       s = path.split(':')
       if len(s)==2:
          return pd.read_excel(s[0],**reader_args,sheet_name=s[1])
       return pd.read_excel(path,**reader_args)
    else:
       return pd.read_csv(path,**reader_args)
   
dfs = [(fn,load_frame(fn)) for fn in args.input]

if args.identify:
   for fn,df in dfs:
       df['FILE-NAME'] = fn
       df['FILE-INDEX'] = df.index

if len(dfs) == 1:
    df = dfs[0][1]
else:
    df = pd.concat([d[1] for d in dfs],ignore_index=True,sort=False)
    del dfs

if args.columns:
   print('\n'.join(df.columns.values))
   exit()

if args.join:
   cols=[c.split('=') for c in args.join[1:]]
   df = df.merge(
       load_frame(args.join[0]),
       how='left',
       left_on=[c[0] for c in cols],
       right_on=[c[-1] for c in cols],
       indicator=True
   )

if args.where:
   for c in args.where:
       kv = c.split('=')
       col = kv[0]
       invert = col.endswith('!')
       if invert:
          col = col[:-1]
          
       s = kv[1].split(',')

       if len(s) == 1:
          if '*' in kv[1]:
             crit = df[col].fillna('').str.match("({})".format(kv[1].replace('*','.*')))
          else:
             dflt=''
             v = kv[1]
             if df[col].dtype==int:
                 v = int(v)
                 dflt=0
             if df[col].dtype==float:
                 v = float(v)
                 dflt=0.0

             crit = df[col].fillna(dflt) == v
       else:
          crit = df[col].isin(s)

       if invert:
          df = df[~crit]
       else:
          df = df[crit]

if args.groupby:
   df = df.groupby(args.groupby,as_index=False).sum()

if args.select:
   if len(args.select)==1 and args.select[0].startswith('file:'):
       args.select = [col.replace('\n','') for col in open(args.select[0][5:],'r').readlines()]
   df = df[args.select]

def display(df,subset=None,total=0):
    if args.filename:
       if subset:
          filename = args.filename.replace('.','-{}-{}.'.format(subset,len(df)))
       else:
          filename = args.filename
       if filename.lower().endswith('.xlsx'):
           df.to_excel(filename,index=False,freeze_panes=(1,0))
       elif filename.lower().endswith('.pk'):
           df.to_pickle(filename)
       else:
           df.to_csv(filename,index=False)
    else:
       if subset:
          print ("{} {}".format(subset,len(df)))
       display_df(df,args.dp)

if args.unique:
   df = df.drop_duplicates()

if args.first > 0:
   display(df[:args.first],"First")

if args.last > 0:
   display(df[-args.last:],"Last")

if args.first == 0 and args.last == 0:
   display(df)
